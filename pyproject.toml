[build-system]
requires = ["setuptools", "cmake_build_extension"]
build-backend = "setuptools.build_meta"

[project]
name = "BatchPlan"
version = "0.0.1"
authors = [{ name = "Burak Yildiz", email = "0byldz@gmail.com" }]
description = "BatchPlan: A large scale solution for floor plan extraction"
readme = "README.md"

[project.urls]
Homepage = "https://github.com/byildiz/BatchPlan"
Issues = "https://github.com/byildiz/BatchPlan/issues"

[tool.setuptools]
packages = ["batchplan"]

[tool.cibuildwheel]
# manylinux-x86_64-image = "manylinux_2_24"

[tool.cibuildwheel.linux]
environment = { LD_LIBRARY_PATH = "/opt/build/occt772/lib" }
before-build = [
    "yum install -y gcc gcc-c++ make swig ninja-build wget cmake git mesa-libGLU-devel mesa-libGL-devel libXmu-devel libXi-devel freetype-devel tk-devel rapidjson-devel pcre2-devel",
    "wget -q -O occt-7.7.2.tar.gz \"https://git.dev.opencascade.org/gitweb/?p=occt.git;a=snapshot;h=cec1ecd0c9f3b3d2572c47035d11949e8dfa85e2;sf=tgz\"",
    "tar -zxf occt-7.7.2.tar.gz",
    "cd occt-cec1ecd",
    "mkdir -p build",
    "cmake -S . -B build -DINSTALL_DIR=/opt/build/occt772 -DBUILD_RELEASE_DISABLE_EXCEPTIONS=OFF -DBUILD_MODULE_ApplicationFramew=OFF -DBUILD_MODULE_DETools=OFF -DBUILD_MODULE_DataExchange=OFF -DBUILD_MODULE_Draw=OFF -DBUILD_MODULE_Visualization=OFF -GNinja",
    "cmake --build build",
    "cmake --install build",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "batchplan/fixes.py",
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E", "F"]
ignore = ["E722"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
